@page "/authentication"
@using System.Threading
@using UAParser
@using System.Collections.Concurrent
@using Stl.Async
@inherits LiveComponentBase<List<Authentication.SessionModel>>
@inject Session Session
@inject IAuthService AuthService
@inject MomentsAgoService MomentsAgoService
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigator

@{
    var state = State.LastValue;
    var error = State.Error;
}

<h1>Authentication</h1>

@if (error != null) {
    <MudAlert Severity="Severity.Error">Update error: @error.Message</MudAlert>
}

<div class="alert alert-primary">
    <div class="mb-1">
        Open <a href="@Navigator.Uri" target="_blank">this page</a> or
        <a href="/composition" target="_blank">Composition example</a>
        in another window to see how authentication state is synchronized everywhere.
    </div>
    <div class="mb-2">
        If authentication doesn't work, most likely you need to provide
        <code>ClientId</code> and <code>ClientSecret</code> for a GitHub application;
        you can create one:
        <a href="https://github.com/settings/developers" target="_blank">https://github.com/settings/developers</a>.
    </div>
</div>

<MudCard Elevation="12" Class="mb-2">
    <MudCardContent>
        <MudText>
            Session properties:
        </MudText>
        <MudText Typo="Typo.body2">
            <ul>
                <li><code>Session.Id</code>: <b><code>@Session.Id</code></b></li>
            </ul>
        </MudText>
        <MudDivider/>
        <MudText>
            User properties:
        </MudText>
        <MudText Typo="Typo.body2">
            <ul>
                <li><code>User.Id</code>: <b><code>@User.Id</code></b></li>
                <li><code>User.Name</code>: <b><code>@User.Name</code></b></li>
            </ul>
            @if (User.IsAuthenticated) {
                <MudDivider/>
                <MudText>Claims:</MudText>
                <ul>
                    @foreach (var (key, value) in User.Claims) {
                        <MudText Typo="Typo.body2">
                            <li><code>@key</code>: <b><code>@value</code></b></li>
                        </MudText>
                    }
                </ul>
            }
        </MudText>
        @if (User.IsAuthenticated && state.Count > 0) {
            <MudDivider/>
            <MudText>
                Sessions:
            </MudText>
            <MudText Typo="Typo.body2">
                <MudTable Items="@state" Elevation="10">
                    <HeaderContent>
                        <MudTh>IP</MudTh>
                        <MudTh>Browser</MudTh>
                        <MudTh>Created</MudTh>
                        <MudTh>Last Seen</MudTh>
                        <MudTh></MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="IP">@context.IPAddress</MudTd>
                        <MudTd DataLabel="Browser">@context.UserAgent</MudTd>
                        <MudTd DataLabel="Created">@context.Created</MudTd>
                        <MudTd DataLabel="Last Seen">@context.LastSeen</MudTd>
                        <MudTd>
                            @if (context.IsCurrent) {
                                <MudAlert Elevation="10" Severity="Severity.Success" Variant="Variant.Filled" Dense="true" Style="Width: 100pt;">Current</MudAlert>

                            } else {
                                <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="_ => Kick(context.Id)">Kick</MudButton>
                            }
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            </MudText>
        }
    </MudCardContent> @* card-body *@
    <MudCardContent>
        <AuthorizeView>
            <Authorized>
                <div class="mb-2">
                    <MudButton Color="Color.Warning" Variant="Variant.Text" OnClick="SignOut" Size="Size.Small">
                        Sign out
                    </MudButton>
                    <MudButton Color="Color.Warning" OnClick="SignOutEverywhere" Size="Size.Small">
                        Sign out everywhere
                    </MudButton>
                </div>
                <div class="alert alert-warning">
                    To sign out completely, you need to either sign out from GitHub,
                    or revoke access from this application here:
                    <a href="https://github.com/settings/applications" target="_blank">https://github.com/settings/applications</a>.
                </div>
            </Authorized>
            <NotAuthorized>
                    <MudButton Color="Color.Warning" OnClick="SignIn" Size="Size.Small">
                        Sign in
                    </MudButton>
            </NotAuthorized>
        </AuthorizeView>
    </MudCardContent>
</MudCard>

@code {
    public class SessionModel
    {
        public string Id { get; set; } = "";
        public string IPAddress { get; set; } = "";
        public string UserAgent { get; set; } = "";
        public string Created { get; set; } = "";
        public string LastSeen { get; set; } = "";
        public bool IsCurrent { get; set; }
    }

    private static readonly Parser Parser = Parser.GetDefault();

    [CascadingParameter]
    private Task<AuthState> AuthStateTask { get; set; } = null!;
    private AuthState AuthState { get; set; } = new(new User("")); // For SSB pre-render
    private User User => AuthState.User;
    private ConcurrentDictionary<string, UserAgent> UserAgentCache = new();

    protected override async Task OnParametersSetAsync() => AuthState = await AuthStateTask;

    protected override void ConfigureState(LiveState<List<SessionModel>>.Options options)
        => options.InitialOutputFactory = _ => new List<SessionModel>();

    protected override async Task<List<SessionModel>> ComputeStateAsync(CancellationToken cancellationToken)
    {
        var sessions = await AuthService.GetUserSessionsAsync(Session, cancellationToken).ConfigureAwait(false);
        var result = new List<SessionModel>();

        Task<string> GetMomentsAgo(DateTime dateTime) => MomentsAgoService.GetMomentsAgoAsync(dateTime);

        foreach (var session in sessions) {
            var userAgent = UserAgentCache.GetOrAdd(session.UserAgent, ua => Parser.ParseUserAgent(ua));
            var model = new SessionModel() {
                Id = session.Id,
                IsCurrent = Session.Id == session.Id,
                IPAddress = session.IPAddress,
                UserAgent = $"{userAgent.Family} {userAgent.Major}.{userAgent.Minor}",
                Created = await GetMomentsAgo(session.CreatedAt),
                LastSeen = await GetMomentsAgo(session.LastSeenAt),
            };
            result.Add(model);
        }
        return result;
    }

    private void SignIn() => JSRuntime.InvokeVoidAsync("FusionAuth.signIn");
    private void SignOut() => JSRuntime.InvokeVoidAsync("FusionAuth.signOut");
    private void Kick(string sessionId)
    {
        if (sessionId == Session.Id)
            SignOut();
        else
            Task.Run(() => AuthService.SignOutAsync(true, new Session(sessionId))).Ignore();
    }

    private void SignOutEverywhere()
    {
        // No server-side API endpoint for this action(yet), so let's do this on the client
        var sessions = State.LastValue.Where(s => s.Id != Session.Id);
        foreach (var sessionModel in sessions) {
            Kick(sessionModel.Id);
        }
        SignOut();
    }
}
